// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
  directUrl = env("DIRECT_URL") 
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  provider      String?   // 認証プロバイダー (google, line など)
  provider_id   String?   // 認証プロバイダーから提供されるID
  stripe_customer_id String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  subscription  Subscription?
  accounts      Account[]
  sessions      Session[]
  
  @@unique([provider, provider_id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                    String    @id @default(uuid())
  user_id              String    @unique
  stripe_subscription_id String   @unique
  status               String
  current_period_start DateTime
  current_period_end   DateTime
  cancel_at_period_end Boolean   @default(false)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  user                 User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model SubscriptionTrash {
  id                    String    @id @default(uuid())
  user_id              String
  stripe_subscription_id String
  status               String
  current_period_start DateTime
  current_period_end   DateTime
  cancel_at_period_end Boolean
  created_at           DateTime  @default(now())
  deleted_at           DateTime  @default(now())
  original_subscription_id String
}

